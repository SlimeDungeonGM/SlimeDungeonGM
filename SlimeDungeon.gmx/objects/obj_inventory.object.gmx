<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Inventory


/*
    Items that can be in the inventory
    0=spr_health
    1=spr_key
    2=spr_axe
    3=spr_sword
    
    -1 = Empty

*/

globalvar showInv; // display the inventory?
showInv = true;
globalvar maxItems; // total item slots.
maxItems = 5;

// loads the inventory with empty spots.
for(i=0; i &lt; maxItems; i++)
{
    global.inventory[i] = -1;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw Inventory

if(showInv)
{
    var x1,x2,y1,y2;
    x1 = view_xview[0];
    x2 = x1 + view_wview[0];
    y1 = view_yview[0];
    y2 = y1 + 64;
    
    // makes the retangle
    draw_set_colour(c_black);
    draw_set_alpha(0.8);
    draw_rectangle(x1,y1,x2,y2,0);
    draw_set_alpha(1);
    
    
    
    // checks to see if any of the inventory slots are represented by a number assigment.
    for(i=0; i &lt; maxItems; i++)
    {
        draw_sprite(s_keyboard_curser,0,x1+24+(i*40),y2-24);
        switch(global.inventory[i])
        {
            case -1: draw_sprite(spr_slot,0,x1+24+(i*40),y2-24); break;
            case 0: draw_sprite(spr_health,0,x1+24+(i*40),y2-24); break;
            case 1: draw_sprite(spr_key,0,x1+24+(i*40),y2-24); break;
            case 2: draw_sprite(spr_axe,0,x1+24+(i*40),y2-24); break;
            case 3: draw_sprite(spr_sword,0,x1+24+(i*40),y2-24); break;
        }
        
        
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
