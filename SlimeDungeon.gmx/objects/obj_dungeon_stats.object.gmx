<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize the player stats
if(instance_number(obj_dungeon_stats) &gt; 1) instance_destroy();
hp = 5;
maxhp = hp;
stamina = 10;
maxstamina = stamina;
expr = 0;
maxexpr = 3;
level = 1;
attack = 1;

dp = 1000;
maxdp = 1000;

//Global boolean to control if display is shown.
global.display_dungeon = false;

draw_set_font(fnt_text);
draw_set_colour(c_white);

//dungeon_ui = scr_dungeon_wave_hud;
//dungeon_mode = scr_dungeon_wave_state;

dungeon_ui = scr_dungeon_survival_hud;
dungeon_mode = scr_dungeon_survival_state;

toggle_camera = false;

//wave control variables
creature_count = 0;
creature_deathcount = 0;
creature_maxcount = 3;
bstop_spawn = false;

next_wave_time = 5;//delay the wave
start_wave = true;
start_next_wave = false;
wave_count = 0;
wave_maxcount = 2;

bfinish_wave = false;
reset_wave = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wave check?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stamina regan alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control the stats
//if(hp &lt; 0){
//    hp = 0;
//}

//stamina regen
//if( stamina &lt; maxstamina &amp;&amp; alarm[0] == -1){
//    stamina++;
//}

if(reset_wave){
    //player reset
    hp = 5;
    maxhp = hp;
    stamina = 10;
    maxstamina = stamina;
    expr = 0;
    maxexpr = 3;
    level = 1;
    attack = 1;    
    //wave reset
    creature_count = 0;
    creature_deathcount = 0;
    creature_maxcount = 3;
    bstop_spawn = false;
    
    next_wave_time = 5;//delay the wave
    start_wave = true;
    start_next_wave = false;
    wave_count = 0;
    wave_maxcount = 2;
    reset_wave = false;
}

//pause the game
if(obj_input.dungeonmenu_key){
    //if(room != rm_pause){
    //obj_input.dungeon_key = false;
    if(instance_exists(obj_dungeon_menu)){
        if(obj_dungeon_menu.bdisplay){
            obj_dungeon_menu.bdisplay = false;
        }else{
            obj_dungeon_menu.bdisplay = true;
        }
    }
}

script_execute(dungeon_mode);

if(obj_input.camtoggle_key){
    if(toggle_camera){
        toggle_camera = false;
    }else{
        toggle_camera = true;
    }
}

if(toggle_camera){
    if(obj_input.right_key){
        obj_view.x+=10;
    }
    if(obj_input.left_key){
        obj_view.x-=10;
    }
    if(obj_input.up_key){
        obj_view.y -= 10;
    }
    if(obj_input.down_key){
        obj_view.y += 10;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remember the player's start position
//if(room == rm_pause) exit;

//switch(room_start_action){
//    case RETURN:
//        break;
//    case NEW_ROOM:
//    default:
        //if(instance_exists(obj_player)){
            //player_xstart = obj_player.x;
            //player_ystart = obj_player.y;
        //}
//        break;
//    case LOAD:
//        scr_load_game();
//        break;
//}
//room_persistent = false;
//room_start_action = NEW_ROOM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the hud
var xx = display_get_gui_width()/2;
var yy = display_get_gui_height()/2;

//draw_text(xx,yy-128, "Dungeon Display");

//Fix when player death and presistent draw.
if(global.display_dungeon == true){
    draw_set_colour(c_white);
    draw_text(0,0, "Dungeon Menu[A]");
    draw_text(0,64, "Camera[TAB]:"+  string(toggle_camera));
    draw_text(0,64+16,"[&lt;][V][&gt;][^]:Move Camera");    
    script_execute(dungeon_ui);
    draw_set_colour(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
