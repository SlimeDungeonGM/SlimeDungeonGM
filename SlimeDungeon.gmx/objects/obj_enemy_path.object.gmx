<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chinlin_stand_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_lifeform_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize the slime
//phy_fixed_rotation = true;
event_inherited();

hb_offset_x = -16;
hb_offset_y = -16;
hb_width = 32;
hb_height = 4;

image_speed = 0.2;
spd = 1.5;
state = scr_bot_idle_state;
alarm[0] =  room_speed * irandom_range(2,5);
sight = 64;
xaxis = 0;
yaxis = 0;

//target = instance_create(x,y,obj_target);

movement = IDLE;
face = RIGHT;

//point = 0;
//done = 0;

//create the sprite array
sprite[UP, MOVE] = spr_chinlin_run_up;
sprite[DOWN, MOVE] = spr_chinlin_run_down;
sprite[RIGHT, MOVE] = spr_chinlin_run_right;
sprite[LEFT, MOVE] = spr_chinlin_run_right;

sprite[UP, ATTACK] = spr_chinlin_run_right;
sprite[DOWN, ATTACK] = spr_chinlin_run_right;
sprite[RIGHT, ATTACK] = spr_chinlin_run_right;
sprite[LEFT, ATTACK] = spr_chinlin_run_right;

sprite[UP, IDLE] = spr_chinlin_stand_up;
sprite[DOWN, IDLE] = spr_chinlin_stand_down;
sprite[RIGHT, IDLE] = spr_chinlin_stand_right;
sprite[LEFT, IDLE] = spr_chinlin_stand_right;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create the experience
instance_create(x,y,obj_expr);

//Create the key to open the door
//instance_create(x,y+2,obj_Key);

audio_play_sound(snd_enemy_die,5,false);

//creature_count -= 1;
if(instance_exists(obj_dungeon_stats)){
    obj_dungeon_stats.creature_deathcount++;
}

//drop health pack
if (scr_chance(0.5)){
    instance_create(x + random_range(-4,4), y+ random_range(-4,4) ,obj_health);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stall alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wander alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// run current state
event_inherited();
script_execute(state);
//sprite move or attack animation sprite
sprite_index = sprite[face, movement];


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// damage the player
if(state != scr_bot_stall_state){
    var dir = point_direction(other.x, other.y, x, y);
    var xdir = lengthdir_x(1, dir);
    var ydir = lengthdir_y(1, dir);
    
    var damage = instance_create(other.x+xdir, other.y+ydir, obj_damage);
    damage.creator = id;
    damage.knockback = 1;
    state = scr_bot_stall_state;
    alarm[1] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_command_units)){
    if(keyboard_check(vk_shift)){
        show_debug_message("shift key found?");
        var bfound = false;
        for(var i = 0; i &lt; ds_list_size(obj_command_units.selectunits);i++){
            var val = ds_list_find_value(obj_command_units.selectunits,i);
            if(val == id){
                show_debug_message("found!");
                bfound = true;
            }
        }
        if(!bfound){
            ds_list_add(obj_command_units.selectunits,id);
        }
    }else{
        //need to select box check for this.
        obj_command_units.selectunits = ds_list_create();
        ds_list_add(obj_command_units.selectunits, id);
        show_debug_message("add!");        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.300000011920929</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,14</point>
    <point>20,14</point>
    <point>20,24</point>
    <point>4,24</point>
  </PhysicsShapePoints>
</object>
