<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize the player stats
if(instance_number(obj_player_stats) &gt; 1) instance_destroy();

bdisplay_healthbar = true;
bdisplay_hungerbar = true;
hb_offset_x = -16;
hb_offset_y = -16;
hb_width = 32;
hb_height = 4;


hp = 5;
maxhp = hp;
stamina = 10;
maxstamina = stamina;
expr = 0;
maxexpr = 3;
level = 1;
attack = 1;

reset_player = false;

/*
    Items that can be in the inventory
    0=spr_health
    1=spr_key
    2=spr_axe
    3=spr_sword
    
    -1 = Empty

*/

globalvar showInv; // display the inventory?
showInv = false;
globalvar maxItems; // total item slots.
maxItems = 5;

// loads the inventory with empty spots.
for(i=0; i &lt; maxItems; i++)
{
    global.inventory[i] = -1;
}



global._test = false; //Turns off display of inventory

draw_set_font(fnt_text);

// get the player's xstart and ystart
if(instance_exists( obj_player)){
    player_xstart = obj_player.x;
    player_ystart = obj_player.y;
}else{
    player_xstart = 0;
    player_ystart = 0;
}

// save the previous room
previous_room = room;
room_start_action = NEW_ROOM;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stamina regan alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control the stats

//player reset
if(reset_player){
    hp = 5;
    maxhp = hp;
    stamina = 10;
    maxstamina = stamina;
    expr = 0;
    maxexpr = 3;
    level = 1;
    attack = 1;
    reset_player = false;  
}

//check for death
if(hp &lt;= 0){
    hp = 0;
    global._display_dungeon = false;
    global._display_player = false;
    global._ismenu = true;
    global._ishud = false;
    if(room != rm_start_menu){
        if(instance_exists(obj_player)){
            obj_player.persistent = false;
        }
        //previous_room = room;
        room_persistent = false;
        room_goto(rm_start_menu);
    }else{
        //room_goto(previous_room);
    }
}

//stamina regen
if( stamina &lt; maxstamina &amp;&amp; alarm[0] == -1){
    stamina++;
}

//pause the game
if(obj_input.pause_key){
    if(room != rm_pause){
        if(instance_exists(obj_player)){
            obj_player.persistent = false;
        }
        previous_room = room;
        room_persistent = true;
        room_goto(rm_pause);
    }else{
        room_goto(previous_room);
    }
    obj_input.pause_key = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remember the player's start position
if(room == rm_pause) exit;

switch(room_start_action){
    case RETURN:
        break;
    case NEW_ROOM:
    default:
        if(instance_exists(obj_player)){
            player_xstart = obj_player.x;
            player_ystart = obj_player.y;
        }
        break;
    case LOAD:
        scr_load_game();
        break;
}
room_persistent = false;
room_start_action = NEW_ROOM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the stats

//Fixed the menu when player dies and the stats remain after death
//Added for extra room added. You need to put || after the last statement in the if.
if(global._display_player)
{
    if(global._ishud)
    {
        draw_set_halign(fa_left);
        draw_text(4,16*4+4, "HP: " + string(hp) + "/" + string(maxhp));
        //draw_healthbar(5,18*4+4,3,15*4+4,maxhp,c_white,c_red,c_lime,0,true,true);
        draw_text(4,16*5+4, "STAMINA: " + string(stamina) + "/" + string(maxstamina));
        draw_text(4,16*6+4, "LEVEL: " + string(level) );
        
        
        // Draw Inventory
        if(showInv)
        {
            var x1,x2,y1,y2;
            x1 = view_xview[0];
            x2 = x1 + view_wview[0];
            y1 = view_yview[0];
            y2 = y1 + 64;
            // makes the retangle
            draw_set_colour(c_black);
            draw_set_alpha(0.8);
            draw_rectangle(x1,y1,x2,y2,0);
            draw_set_alpha(1); 
            // checks to see if any of the inventory slots are represented by a number assigment.
            for(i=0; i &lt; maxItems; i++)
            {
                draw_sprite(s_keyboard_curser,0,x1+24+(i*40),y2-24);
                switch(global.inventory[i])
                {
                      case -1: draw_sprite(spr_slot,0,x1+24+(i*40),y2-24); break;
                      case 0: draw_sprite(spr_health,0,x1+24+(i*40),y2-24); break;
                      case 1: draw_sprite(spr_key,0,x1+24+(i*40),y2-24); break;
                      case 2: draw_sprite(spr_axe,0,x1+24+(i*40),y2-24); break;
                      case 3: draw_sprite(spr_sword,0,x1+24+(i*40),y2-24); break;
               }
           }    
       }
        
      
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bdisplay_healthbar){
    if(instance_exists(obj_player)){
        var xx = obj_player.x;
        var yy = obj_player.y;

        draw_set_colour(c_gray);
        draw_rectangle(xx+hb_offset_x,yy+hb_offset_y,xx+hb_width+hb_offset_x,yy+  hb_height + hb_offset_y,false);
        draw_set_colour(c_green);
        
        var bar_percent = hp / maxhp ;
        
        //show_debug_message(bar_percent);
        var percent_width = hb_width * clamp(bar_percent,0,1);
        //show_debug_message(max(bar_percent,1));    
        //show_debug_message(percent_width);
        draw_rectangle(xx+hb_offset_x,yy+hb_offset_y,xx + percent_width + hb_offset_x,yy +  hb_height + hb_offset_y,false);
    }
}
//draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
