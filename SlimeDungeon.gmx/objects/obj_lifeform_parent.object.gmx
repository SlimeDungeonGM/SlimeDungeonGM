<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize the lifeform
phy_fixed_rotation = true;
hp = 3;
maxhp = 3;
monsterTier = 1;
name = "testName";
spd = 1;

//health bar
bdisplay_healthbar = true;
bdisplay_hungerbar = true;
hb_offset_x = 0;
hb_offset_y = 0;
hb_width = 32;
hb_height = 4;

//target
target = noone;
commandTarget = noone;
command = commands.none;
target_x = -1;
target_y = -1;
follow_distance = 4;

//path
followTarget = instance_create(x,y,obj_follow_target);
followTarget.owner = self;
point = 0;
path_done = 0;

//paramse
name = "testname";
bsingle_select = false;
teamid = -1;
owner = "";
creator = "";

//loyalty
loyalty = 50;
loyaltyMap = ds_map_create();
loyaltyMap[? commands.move] = 25;
loyaltyMap[? commands.attack] = 50;
loyaltyMap[? commands.mine] = 5;


//hunger
maxHunger = 100;
hunger = maxHunger;
hungerDrop = maxHunger / 180 / room_speed;
mildHunger = 0.9;
warningHunger = 0.6;
criticalHunger = 0.3;

//faction
var inst;
faction = factions.neutral;
baseFaction = factions.neutral;
mineStrength = 10;

//element
inst = instance_position(x, y, obj_place);
if inst != noone {
    element = inst.element;
    image_blend = ds_map_find_value(global.element_colour, element);
} else {
    element = elements.none;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// delete stuff
death_loyalty();
with(followTarget)
{
    instance_destroy(); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// eating alarm, dont overload
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// attack cooldown dont override
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pathing alarm dont override
with(followTarget)
{
    followingPath =  false;
    path_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control depth
if(followTarget.followingPath)
{
    var dir = point_direction(x,y,followTarget.x,followTarget.y);
    var hspd = lengthdir_x(spd,dir);
    var vspd = lengthdir_y(spd,dir);
    if(hspd != 0){
        image_xscale = sign(hspd);
    }
    scr_get_face(dir);
    
    phy_position_x += hspd
    phy_position_y += vspd;
}
depth = -y;
hunger = max(0, hunger - hungerDrop);
if ( hunger &lt;= 0) {
    hp = max(0, hp - (maxhp/10.0/room_speed));
    loyalty -= 2/room_speed;
}

if(hp &lt;= 0){
    var corpse = instance_create(x,y,obj_corpse_parent);
    corpse.food = maxHunger/2;
    corpse.sprite_index = death_sprite;
    instance_destroy();
}
var corpse = collision_point(x,y,obj_corpse_parent,false,true);
if (corpse &amp;&amp; alarm[11] &lt;= 0)
{
    var eatAmount = max(0,min(maxHunger-hunger,corpse.food,maxHunger/10));
    corpse.food -= eatAmount;
    hunger += eatAmount;
    alarm[11] = 1*room_speed;
    loyalty += 5;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collide
if (command == commands.mine &amp;&amp; commandTarget == other &amp;&amp; alarm[11] &lt;= 0)
{
    other.removalWork -= mineStrength;
    alarm[11] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw health bar
if(bdisplay_healthbar){
    draw_set_colour(c_gray);
    draw_rectangle(x+hb_offset_x,y+hb_offset_y,x+hb_width+hb_offset_x,y+  hb_height + hb_offset_y,false);
    draw_set_colour(c_green);
    
    var bar_percent = hp / maxhp ;
    
    //show_debug_message(bar_percent);
    var percent_width = hb_width * clamp(bar_percent,0,1);
    //show_debug_message(max(bar_percent,1));    
    //show_debug_message(percent_width);
    draw_rectangle(x+hb_offset_x,y+hb_offset_y,x + percent_width + hb_offset_x,y +  hb_height + hb_offset_y,false);
}
if(bdisplay_hungerbar &amp;&amp; hungerDrop != 0){
    draw_set_colour(c_gray);
    draw_rectangle(x+hb_offset_x,y+hb_offset_y+hb_height,x+hb_width+hb_offset_x,y+hb_height+(0.25*hb_height)+hb_offset_y,false);
    draw_set_colour(c_orange);
    
    var bar_percent = hunger / maxHunger ;
    
    //show_debug_message(bar_percent);
    var percent_width = hb_width * clamp(bar_percent,0,1);
    //show_debug_message(max(bar_percent,1));    
    //show_debug_message(percent_width);
    draw_rectangle(x+hb_offset_x,y+hb_offset_y+hb_height,x+percent_width+hb_offset_x,y+hb_height+(0.25*hb_height)+hb_offset_y,false);
}
if (commandTarget != noone &amp;&amp; instance_exists(commandTarget))
{
    var xOffset = sprite_get_xoffset(target.sprite_index);
    var yOffset = sprite_get_yoffset(target.sprite_index);
    var centerX = sprite_get_width(target.sprite_index) / 2.0;
    var centerY = sprite_get_height(target.sprite_index) / 2.0;
    draw_circle(target.x - xOffset + centerX,target.y - yOffset + centerY,5,true);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
