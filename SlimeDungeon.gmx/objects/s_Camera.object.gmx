<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//dragging=0;
omx=view_xview;
omy=view_yview;
zoom_factor=1;
/*
zoom = 1;
zoom_min = .1;
zoom_max = 2;

bw = room_width;
bh = room_height;

//1024
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zooming with mouse wheel


X=view_xview;
Y=view_yview;


if mouse_check_button(mb_middle){
view_object=noone;
view_xview-=vmx;
view_yview-=vmy;
}

vmx = mouse_x-X -omx
omx = mouse_x-X
vmy = mouse_y-Y -omy
omy = mouse_y-Y

if mouse_wheel_up(){
center_of_space_x=view_xview+view_wview*zoom_factor;
center_of_space_y=view_yview+view_hview*zoom_factor;
view_wview=1024*zoom_factor;
view_hview=1024*zoom_factor;
view_xview=center_of_space_x-view_wview*zoom_factor;
view_yview=center_of_space_y-view_hview*zoom_factor;
}

if mouse_wheel_down(){
center_of_space_x=view_xview+view_wview*zoom_factor;
center_of_space_y=view_yview+view_hview*zoom_factor;
view_wview=1024*zoom_factor;
view_hview=1024*zoom_factor;
view_xview=center_of_space_x-view_wview*zoom_factor;
view_yview=center_of_space_y-view_hview*zoom_factor;
}

view_xview = clamp(view_xview,0,room_width-view_wview);
view_yview = clamp(view_yview,0,room_height-view_hview);

/*
//Control Zoom
if(mouse_wheel_up() and zoom &lt; zoom_max)
{
    //Zoom in
    zoom -= .1;
    event_user(0);

}

if(zoom &gt; zoom_max or zoom &lt; 0) zoom = .1;

if(mouse_wheel_down() and zoom &gt; zoom_min)
{
    //Zoom in
    zoom += .1;
    event_user(0);
}

if(mouse_check_button(mb_middle)){

    zoom = 1;
    event_user(0);
}

view_xview=clamp(view_xview,0,room_width-view_wview);
view_yview=clamp(view_yview,0,room_height-view_hview);
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Panning aroung with keyboard control

var _speed=10;
if(keyboard_check(vk_shift))
    _speed = 30;
view_xview += (keyboard_check(vk_right)-keyboard_check(vk_left)) * _speed;
view_yview  += (keyboard_check(vk_down)-keyboard_check(vk_up)) * _speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Maintains that location of the mouse

//Gets the current ratio of the mouse view

var mx, my;
mx =(mouse_x-view_xview)/view_wview;
my = (mouse_y-view_yview)/view_hview;

// Updates the view widths and heights

view_wview = bw/zoom;
view_hview = bh/zoom;

// Update base on the ratio of the mouse view and mouse position
view_xview = mouse_x-view_wview*mx;
view_yview = mouse_y-view_hview*my;

view_wview=bw*zoom;
view_hview=bh*zoom;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
