<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_place</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set variable
event_inherited();
name = "Wall";
objtype = WALL;
isfixed = false;//center tile
issnap = true;//tile
removalWork = 100;
depth = -y;
left = false;
right = false;
up = false;
down = false;
mp_grid_add_cell(global.pathing, x div CELL_WIDTH, y div CELL_HEIGHT);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_calc_walls();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move to help with wall recalculation
mp_grid_clear_cell(global.pathing, x div CELL_WIDTH, y div CELL_HEIGHT);
x = -1;
y = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// get walls to recalculate how they look
scr_calc_walls();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (removalWork &lt;= 0)
{
    instance_create(x,y,obj_dirt);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (up)
{
    if (left)
    {
        draw_sprite(wall_testing,5,x,y-16);
    }
    else
    {
        draw_sprite(wall_testing,2,x,y-16);
    }
    if (right)
    {
        draw_sprite(wall_testing,5,x+16,y-16);
    }
    else
    {
        draw_sprite(wall_testing,3,x+16,y-16);
    }
}
else
{
    if (left)
    {
        draw_sprite(wall_testing,4,x,y-16);
    }
    else
    {
        draw_sprite(wall_testing,0,x,y-16);
    }
    if (right)
    {
        draw_sprite(wall_testing,4,x+16,y-16);
    }
    else
    {
        draw_sprite(wall_testing,1,x+16,y-16);
    }
}
if (down)
{
    if (left)
    {
        draw_sprite(wall_testing,5,x,y);
    }
    else
    {
        draw_sprite(wall_testing,2,x,y);
    }
    if (right)
    {
        draw_sprite(wall_testing,5,x+16,y);
    }
    else
    {
        draw_sprite(wall_testing,3,x+16,y);
    }
}
else
{
    if (left)
    {
        draw_sprite(wall_testing,8,x,y);
    }
    else
    {
        draw_sprite(wall_testing,6,x,y);
    }
    if (right)
    {
        draw_sprite(wall_testing,8,x+16,y);
    }
    else
    {
        draw_sprite(wall_testing,7,x+16,y);
    }
}
if (left)
{
    draw_sprite(wall_testing,12,x,y+16);
}
else
{
    draw_sprite(wall_testing,11,x,y+16);
}
if (right)
{
    draw_sprite(wall_testing,12,x+16,y+16);
}
else
{
    draw_sprite(wall_testing,13,x+16,y+16);
}
*/
/*
draw_sprite(spr_wall_test,0,x,y-16);
draw_sprite(spr_wall_test,1,x+16,y-16);
draw_sprite(spr_wall_test,2,x,y);
draw_sprite(spr_wall_test,3,x+16,y);
draw_sprite(spr_wall_test,4,x,y+16);
draw_sprite(spr_wall_test,5,x+16,y+16);
*/
var i = x div CELL_WIDTH;
var j = y div CELL_HEIGHT;
var val = global.wallConnections[i,j];
scr_draw_wall(i*CELL_WIDTH, j*CELL_HEIGHT, val)
//draw_self();
if(removalWork &lt; 100)
{
    draw_set_colour(c_gray);
    draw_rectangle(x+5,y+14,x+sprite_width-5,y+18,false);
    draw_set_colour(c_green);
    
    var bar_percent = removalWork / 100 ;
    
    //show_debug_message(bar_percent);
    var percent_width = (sprite_width-10) * clamp(bar_percent,0,1);
    //show_debug_message(max(bar_percent,1));    
    //show_debug_message(percent_width);
    draw_rectangle(x+5,y+14,x+5+percent_width,y+18,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
